<?php

class FsApimApiWebTestCase extends SiteWebTestCase {
  use SiteTestHelpers {
    SiteTestHelpers::__construct as private __sthConstruct;
  }
  use FsTestHelperFunctions {
    FsTestHelperFunctions::__construct as private __athfConstruct;
  }

  /**
   * {@inheritdoc}
   */
  public function __construct($test_id = NULL) {
    $this->__sthConstruct($test_id);
    $this->__athfConstruct($test_id);
  }

  /**
   * Provide information about the site test.
   */
  public static function getInfo() {
    return [
      'name' => 'Forum Systems API Management API test',
      'description' => 'Testing the features of apis within API Management portal',
      'group' => 'Forum Systems API Management group',
      'mode' => 'site',
    ];
  }

  /**
   * Test case - General page things (agnostic of apiResources)
   */
  public function testPageGeneral() {



    if ($this->getApiPageOneLine($this)) {
      debug('There is at least one product present - continuing');
      // Check for the presence of each code snippet link on page
      $snippets = $this->findElementByCss('.language a');
      for ($i = 0; $i < count($snippets); $i++) {
        $this->assertLinkByHref(strtolower('#' . $snippets[$i]), 0, 'Code snippet tab for ' . $snippets[$i] . ' found in page HTML');
        $this->assertRaw('>' . $snippets[$i] . '</a>', 'Code snippet tab for ' . $snippets[$i] . ' appears on page');
      }

      // Subscribe button
      $this->assertRaw('<div class="subscribeButton">', 'Subscribe button class is present in the HTML');
      $this->assertRaw('>Subscribe</a>', 'Subscribe button anchor is present in the HTML');
      $this->assertText('Subscribe', 'Subscribe button is displayed on the page');

      // Discuss this API in the forum /
      // TODO this needs to check whether auto creation of forums is on, link wont be there otherwise
      if (($this->findElementByCss('.apiForumLink a')[0]) == 'Discuss this API in the forum') {
        $this->assertLinkByHref('/forum/', 0, 'Link to discuss this API in the forum is present');
        $this->assertRaw('<label>Support</label>', 'Support label is present');
      }
      else {
        $this->fail('The link to discuss this API in the forum is missing');
      }
    }
    else {
      debug('No product present so addtional tests cannot run');

    }
    //Logout
    $this->drupalLogout();
    debug('Finished testPageGeneral');
  }

  /**
   * Test case - the elements included in the apiResources object
   *    Included: download swagger button, call operation button, consumes +
   *    produces fields, title, version number.
   */
  public function testApiReferenceContent() {

    debug('Begin testApiReferenceContent');

    // Get the API page node content and unserialize apiResources
    $node = $this->getApiPageOneLine($this);

    if ($node == FALSE) {
      debug('No APIs present so addtional tests cannot run');
    } else {

      $apiResources = unserialize($node->api_resources[$node->language][0]['value']);

      // Check the title and version number are displayed correctly
      $this->assertText($apiResources['info']['title'], 'The title: ' . $apiResources['info']['title'] . ' is displayed on this page');
      $this->assertText($apiResources['info']['version'], 'The version number: ' . $apiResources['info']['version'] . ' is displayed on this page');

      // Check the presence and link of the swagger download button
      $downloadButton = $this->findElementByCss('.downloadButton a');
      if (isset($downloadButton[0])) {
        $this->pass('The Open API download button is present on the page');
        $linkRefArray = explode('/', $downloadButton[0]['href']);
        $apiRef = fs_apim_base64_url_decode(urldecode($linkRefArray[(count($linkRefArray) - 1)]));
        if ($apiRef == ($apiResources['info']['x-fs-name'] . ':' . $apiResources['info']['version'])) {
          $this->pass('The link to download this API\'s Open API document correctly resolves to the title:version of the API');
        }
        else {
          debug($apiRef);
          debug(($apiResources['info']['x-fs-name'] . ':' . $apiResources['info']['version']));
          $this->fail('The link to download this API\'s Open API document does not correctly resolve to the title:version of the API');
        }
      }
      else {
        $this->fail('The Open API download button is missing from the page');
      }

      // Check whether the API is set to testable
      if ($apiResources['x-fs-configuration']['testable'] != 'true') {
        $this->pass('API is not testable - further tests require a testable API');
        $testable = FALSE;
      }
      else {
        $testable = TRUE;
      }

      // Call operation button + try this operation section
      if ($testable) {
        $this->assertRaw('>Call operation</button>', 'Call operation button is present in the HTML');
        $this->assertText('Call operation', 'Call operation button is displayed on page');
        $this->assertText('Try this operation', 'Try this operation section is displayed on page');
      }
      else {
        $this->assertNoText('Try this operation', 'The API is not set to testable and the try this operaion section is correctly omitted');
      }

      // Consumes + produces fields on the try this operation menu
      if ($testable) {
        $this->assertText('content-type', 'content-type field appears on the page');
        $this->assertRaw("class='parameterName'>content-type<", 'content-type class appears in the page HTML');
        $this->assertText('accept', 'accept field appears on the page');
        $this->assertRaw("class='parameterName'>accept<", 'accept class appears in the page HTML');
      }

      // Consumes + produces at first operation then API wide level
      // Responses on a per operation level
      if ($testable) {
        foreach ($apiResources['paths'] as $pathKey => $pathValue) {
          foreach ($pathValue as $operationKey => $operationValue) {
            if (isset($apiResources['paths'][$pathKey][$operationKey]['consumes'])) {
              $consumes = ($apiResources['paths'][$pathKey][$operationKey]['consumes']);
              foreach ($consumes as $consumeKey => $consumeValue) {
                $this->assertRaw('>' . $consumeValue . '</option>', 'Consumes: ' . $consumeValue . ' is present in the page HTML for operation: ' . $pathKey . ' ' . $operationKey);
              }
            }
            elseif (isset($apiResources['consumes'][0])) {
              debug('consumes not set for this operation but is set at the API level for operation: ' . $pathKey . ' ' . $operationKey);
              for ($i = 0; $i < count($apiResources['consumes']); $i++) {
                $this->assertRaw('>' . ($apiResources['consumes'][$i]) . '</option>', 'option for content type: ' . ($apiResources['consumes'][$i]) . ' is present in the page HTML');
              }
            }
            else {
              $this->assertRaw('class=\'parameterValue\' name="content-type" value=\'application/json\'', 'No content-type of consumption set - correctly defaults to application/json');
            }

            if (isset($apiResources['paths'][$pathKey][$operationKey]['produces'])) {
              $produces = ($apiResources['paths'][$pathKey][$operationKey]['produces']);
              foreach ($produces as $produceKey => $produceValue) {
                $this->assertRaw('>' . $produceValue . '</option>', 'Produces: ' . $produceValue . ' is present in the page HTML for operation: ' . $pathKey . ' ' . $operationKey);
              }
            }
            elseif (isset($apiResources['produces'][0])) {
              debug('produces not set for this operation but is set at the API level');
              for ($i = 0; $i < count($apiResources['produces']); $i++) {
                $this->assertRaw('>' . ($apiResources['produces'][$i]) . '</option>', 'option for content type: ' . ($apiResources['produces'][$i]) . ' is present in the page HTML');
              }
            }
            else {
              $this->assertRaw('class=\'parameterValue\' name="accept" value=\'application/json\'', 'No content-type of production set - correctly defaults to application/json');
            }

            if (isset($apiResources['paths'][$pathKey][$operationKey]['responses'])) {
              $responses = $apiResources['paths'][$pathKey][$operationKey]['responses'];
              foreach ($responses as $responseKey => $responseValue) {
                $this->assertText(strval($responseKey), 'The response code: ' . $responseKey . ' for operation: ' . $pathKey . ' ' . $operationKey . ' is present on the page');
                $this->assertText(strval($responseValue['description']), 'The description for response code: ' . $responseKey . ' for operation: ' . $pathKey . ' ' . $operationKey . ' is present on the page');
              }
            }
          }
        }
      }
    }
    // Logout
    $this->drupalLogout();
    debug('Finished testApiReferenceContent');
  }
}
